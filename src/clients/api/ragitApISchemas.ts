/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
export type AddFileRequest = {
  /**
   * ID of the file to add to the context
   */
  file_id: string;
};

export type ChatRequest = {
  /**
   * The query string to search for
   *
   * @minLength 2
   */
  query: string;
  /**
   * The context ID to search in
   */
  context_id?: string | null;
};

export type ChatResponse = {
  /**
   * The chat ID
   */
  id: string;
  /**
   * The playground ID
   */
  playground_id: string;
  /**
   * The user ID
   */
  user_id: string;
  /**
   * The system prompt
   */
  system_prompt: string;
  /**
   * The user prompt
   */
  user_prompt: string;
  /**
   * The model response
   */
  model_response: string;
  /**
   * The model
   */
  model: string;
  /**
   * The model parameters
   */
  model_params: Record<string, any>;
  /**
   * The documents
   */
  documents: string[];
  /**
   * The creation date and time
   */
  created_at: string;
};

export type CreateContextRequest = {
  /**
   * Name of the context
   */
  name: string;
  /**
   * Description of the context
   */
  description?: string;
  /**
   * ID of the project to which the context belongs
   */
  project_id: string;
  /**
   * ID of the owner of the context
   */
  owner_id: string;
  /**
   * Search mode of the context
   *
   * @default SEARCH_WITH_CITATIONS
   */
  search_mode?: DocumentSearchMode;
  /**
   * Retrieval length of the context
   *
   * @default 1024
   */
  retrieval_length?: number;
  /**
   * Number of documents to retrieve
   *
   * @default 10
   */
  docs_to_retrieve?: number;
  /**
   * Maximum document length
   *
   * @default 256
   */
  max_doc_length?: number;
  /**
   * Document overlap length
   *
   * @default 64
   */
  doc_overlap_length?: number;
  /**
   * Embedding model of the context
   *
   * @default BAAI/bge-base-en
   */
  embedding_model?: EmbeddingModel;
  /**
   * Embedding dimension of the context
   *
   * @default 768
   */
  embedding_dimension?: number;
  /**
   * Distance metric of the context
   *
   * @default COSINE
   */
  distance_metric?: DocumentEmbeddingDistanceMetric;
  /**
   * Extra metadata for the context
   */
  extra_metadata?: Record<string, any> | null;
};

export type CreateProjectRequest = {
  /**
   * Name of the project
   */
  name: string;
  /**
   * Description of the project
   */
  description?: string | null;
  /**
   * ID of the owner of the project
   */
  owner_id: string;
};

export type DocumentEmbeddingDistanceMetric = "COSINE" | "EUCLIDEAN" | "DOT";

export type DocumentSearchMode = "SEARCH" | "SEARCH_WITH_CITATIONS" | "HYDE";

export type EmbeddingModel = "BAAI/bge-base-en";

export type GetPresignedUrlRequest = {
  key: string;
  /**
   * @default 300
   */
  expiration?: number;
  /**
   * ID of the project to which the context belongs
   */
  project_id: string;
  /**
   * Size of the file in bytes
   */
  file_size: number;
  /**
   * Type of the file
   */
  file_type: string;
};

export type HTTPValidationError = {
  detail?: ValidationError[];
};

export type LoginRequest = {
  /**
   * User's Email
   */
  email: string;
  /**
   * User's Password
   */
  password: string;
};

export type MarkUploadStatusRequest = {
  file_id: string;
};

export type PlayGroundResponse = {
  /**
   * The playground ID
   */
  id: string;
  /**
   * The name of the playground
   */
  name: string;
  /**
   * The description of the playground
   */
  description: string;
  /**
   * The readable ID of the playground
   */
  readable_id: number;
  /**
   * The project ID of the playground
   */
  project_id: string;
  /**
   * The context ID of the playground
   */
  context_id: string;
  /**
   * The owner ID of the playground
   */
  owner_id: string;
};

export type SignupRequest = {
  /**
   * User's Email
   */
  email: string;
  /**
   * User's Password
   */
  password: string;
  /**
   * User's First Name
   */
  first_name: string;
  /**
   * User's Last Name
   */
  last_name: string;
};

export type TAuthResponse = {
  /**
   * Access Token
   */
  access_token: string;
  /**
   * Token Type
   */
  token_type: string;
  /**
   * Expiry
   */
  expiry: number;
  /**
   * User
   */
  user: TUser;
};

export type TContext = {
  /**
   * Context's ID
   */
  id: string;
  /**
   * Context's Name
   */
  name: string;
  /**
   * Context's Description
   */
  description: string;
  /**
   * Context's Readable ID
   */
  readable_id: number;
  /**
   * Context's Project ID
   */
  project_id: string;
  /**
   * Context's Owner ID
   */
  owner_id: string;
  /**
   * Context's Search Mode
   */
  search_mode: string;
  /**
   * Context's Retrieval Length
   */
  retrieval_length: number;
  /**
   * Context's Docs To Retrieve
   */
  docs_to_retrieve: number;
  /**
   * Context's Max Doc Length
   */
  max_doc_length: number;
  /**
   * Context's Doc Overlap Length
   */
  doc_overlap_length: number;
  /**
   * Context's Embedding Model
   */
  embedding_model: string;
  /**
   * Context's Embedding Dimension
   */
  embedding_dimension: number;
  /**
   * Context's Distance Metric
   */
  distance_metric: string;
  /**
   * Context's Semantic Search
   */
  semantic_search: boolean;
  /**
   * Context's Extra Metadata
   */
  extra_metadata: Record<string, any>;
  /**
   * Context's Last Refreshed At
   */
  last_refreshed_at: string;
  /**
   * Context's Created At
   */
  created_at: string;
};

export type TDocument = {
  /**
   * Document's ID
   */
  id: string;
  /**
   * Document's Context ID
   */
  context_id: string;
  /**
   * Document's File ID
   */
  file_id: string;
  /**
   * Document's Document
   */
  document: string;
  /**
   * Document's File Name
   */
  file_name: string;
  /**
   * Document's File Type
   */
  file_type: string;
};

export type TFile = {
  id: string;
  name: string;
  status: string;
  description: string;
  project_id: string;
  owner_id: string;
  created_at: string;
  file_size: number;
  file_type: string;
  extra_metadata: Record<string, any>;
};

export type TProject = {
  /**
   * Project's ID
   */
  id: string;
  /**
   * Project's Readable ID
   */
  readable_id: string;
  /**
   * Project's Name
   */
  name: string;
  /**
   * Project's Owner ID
   */
  owner_id: string;
  /**
   * Project's Description
   */
  description: string;
};

export type TUser = {
  /**
   * User's ID
   */
  id: string;
  /**
   * User's Email
   */
  email: string;
  /**
   * User's First Name
   */
  first_name: string;
  /**
   * User's Last Name
   */
  last_name: string;
  /**
   * User's Signin Provider
   */
  signin_provider: string;
  /**
   * User's Created At
   */
  created_at: string;
};

export type ValidationError = {
  loc: (string | number)[];
  msg: string;
  type: string;
};

export type ApiServiceRoutersContextEndpointsTypesDeleteFileRequest = {
  /**
   * ID of the file to add to the context
   */
  file_id: string;
};

export type ApiServiceRoutersFileEndpointsTypesDeleteFileRequest = {
  file_id: string;
};
