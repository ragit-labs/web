/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useRagitApIContext, RagitApIContext } from "./ragitApIContext";
import type * as Fetcher from "./ragitApIFetcher";
import { ragitApIFetch } from "./ragitApIFetcher";
import type * as Schemas from "./ragitApISchemas";

export type GetPresignedUrlSourceFileGetPresignedUrlPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetPresignedUrlSourceFileGetPresignedUrlPostVariables = {
  body: Schemas.GetPresignedUrlRequest;
} & RagitApIContext["fetcherOptions"];

export const fetchGetPresignedUrlSourceFileGetPresignedUrlPost = (
  variables: GetPresignedUrlSourceFileGetPresignedUrlPostVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    Schemas.PresignedUrl,
    GetPresignedUrlSourceFileGetPresignedUrlPostError,
    Schemas.GetPresignedUrlRequest,
    {},
    {},
    {}
  >({
    url: "/source/file/get_presigned_url",
    method: "post",
    ...variables,
    signal,
  });

export const useGetPresignedUrlSourceFileGetPresignedUrlPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PresignedUrl,
      GetPresignedUrlSourceFileGetPresignedUrlPostError,
      GetPresignedUrlSourceFileGetPresignedUrlPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useRagitApIContext();
  return reactQuery.useMutation<
    Schemas.PresignedUrl,
    GetPresignedUrlSourceFileGetPresignedUrlPostError,
    GetPresignedUrlSourceFileGetPresignedUrlPostVariables
  >({
    mutationFn: (
      variables: GetPresignedUrlSourceFileGetPresignedUrlPostVariables,
    ) =>
      fetchGetPresignedUrlSourceFileGetPresignedUrlPost({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type CompleteUploadSourceFileCompleteUploadPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CompleteUploadSourceFileCompleteUploadPostVariables = {
  body: Schemas.MarkUploadStatusRequest;
} & RagitApIContext["fetcherOptions"];

export const fetchCompleteUploadSourceFileCompleteUploadPost = (
  variables: CompleteUploadSourceFileCompleteUploadPostVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    Schemas.MarkSuccess,
    CompleteUploadSourceFileCompleteUploadPostError,
    Schemas.MarkUploadStatusRequest,
    {},
    {},
    {}
  >({
    url: "/source/file/complete_upload",
    method: "post",
    ...variables,
    signal,
  });

export const useCompleteUploadSourceFileCompleteUploadPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MarkSuccess,
      CompleteUploadSourceFileCompleteUploadPostError,
      CompleteUploadSourceFileCompleteUploadPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useRagitApIContext();
  return reactQuery.useMutation<
    Schemas.MarkSuccess,
    CompleteUploadSourceFileCompleteUploadPostError,
    CompleteUploadSourceFileCompleteUploadPostVariables
  >({
    mutationFn: (
      variables: CompleteUploadSourceFileCompleteUploadPostVariables,
    ) =>
      fetchCompleteUploadSourceFileCompleteUploadPost({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type GetProjectSourcesProjectProjectIdSourcesGetPathParams = {
  projectId: string;
};

export type GetProjectSourcesProjectProjectIdSourcesGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetProjectSourcesProjectProjectIdSourcesGetResponse =
  Schemas.TSource[];

export type GetProjectSourcesProjectProjectIdSourcesGetVariables = {
  pathParams: GetProjectSourcesProjectProjectIdSourcesGetPathParams;
} & RagitApIContext["fetcherOptions"];

export const fetchGetProjectSourcesProjectProjectIdSourcesGet = (
  variables: GetProjectSourcesProjectProjectIdSourcesGetVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    GetProjectSourcesProjectProjectIdSourcesGetResponse,
    GetProjectSourcesProjectProjectIdSourcesGetError,
    undefined,
    {},
    {},
    GetProjectSourcesProjectProjectIdSourcesGetPathParams
  >({
    url: "/project/{projectId}/sources",
    method: "get",
    ...variables,
    signal,
  });

export const useGetProjectSourcesProjectProjectIdSourcesGet = <
  TData = GetProjectSourcesProjectProjectIdSourcesGetResponse,
>(
  variables: GetProjectSourcesProjectProjectIdSourcesGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetProjectSourcesProjectProjectIdSourcesGetResponse,
      GetProjectSourcesProjectProjectIdSourcesGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRagitApIContext(options);
  return reactQuery.useQuery<
    GetProjectSourcesProjectProjectIdSourcesGetResponse,
    GetProjectSourcesProjectProjectIdSourcesGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/project/{projectId}/sources",
      operationId: "getProjectSourcesProjectProjectIdSourcesGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetProjectSourcesProjectProjectIdSourcesGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AddWebpagesSourceWebpageAddPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type AddWebpagesSourceWebpageAddPostVariables = {
  body: Schemas.AddWebPagesRequest;
} & RagitApIContext["fetcherOptions"];

export const fetchAddWebpagesSourceWebpageAddPost = (
  variables: AddWebpagesSourceWebpageAddPostVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    Schemas.MarkSuccess,
    AddWebpagesSourceWebpageAddPostError,
    Schemas.AddWebPagesRequest,
    {},
    {},
    {}
  >({ url: "/source/webpage/add", method: "post", ...variables, signal });

export const useAddWebpagesSourceWebpageAddPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MarkSuccess,
      AddWebpagesSourceWebpageAddPostError,
      AddWebpagesSourceWebpageAddPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useRagitApIContext();
  return reactQuery.useMutation<
    Schemas.MarkSuccess,
    AddWebpagesSourceWebpageAddPostError,
    AddWebpagesSourceWebpageAddPostVariables
  >({
    mutationFn: (variables: AddWebpagesSourceWebpageAddPostVariables) =>
      fetchAddWebpagesSourceWebpageAddPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetProjectForUserProjectGetGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetProjectForUserProjectGetGetVariables =
  RagitApIContext["fetcherOptions"];

export const fetchGetProjectForUserProjectGetGet = (
  variables: GetProjectForUserProjectGetGetVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    Schemas.TProject,
    GetProjectForUserProjectGetGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/project/get", method: "get", ...variables, signal });

export const useGetProjectForUserProjectGetGet = <TData = Schemas.TProject>(
  variables: GetProjectForUserProjectGetGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TProject,
      GetProjectForUserProjectGetGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRagitApIContext(options);
  return reactQuery.useQuery<
    Schemas.TProject,
    GetProjectForUserProjectGetGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/project/get",
      operationId: "getProjectForUserProjectGetGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetProjectForUserProjectGetGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SignupAuthSignupPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type SignupAuthSignupPostVariables = {
  body: Schemas.SignupRequest;
} & RagitApIContext["fetcherOptions"];

export const fetchSignupAuthSignupPost = (
  variables: SignupAuthSignupPostVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    Schemas.TAuthResponse,
    SignupAuthSignupPostError,
    Schemas.SignupRequest,
    {},
    {},
    {}
  >({ url: "/auth/signup", method: "post", ...variables, signal });

export const useSignupAuthSignupPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TAuthResponse,
      SignupAuthSignupPostError,
      SignupAuthSignupPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useRagitApIContext();
  return reactQuery.useMutation<
    Schemas.TAuthResponse,
    SignupAuthSignupPostError,
    SignupAuthSignupPostVariables
  >({
    mutationFn: (variables: SignupAuthSignupPostVariables) =>
      fetchSignupAuthSignupPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type LoginAuthLoginPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type LoginAuthLoginPostVariables = {
  body: Schemas.LoginRequest;
} & RagitApIContext["fetcherOptions"];

export const fetchLoginAuthLoginPost = (
  variables: LoginAuthLoginPostVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    Schemas.TAuthResponse,
    LoginAuthLoginPostError,
    Schemas.LoginRequest,
    {},
    {},
    {}
  >({ url: "/auth/login", method: "post", ...variables, signal });

export const useLoginAuthLoginPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TAuthResponse,
      LoginAuthLoginPostError,
      LoginAuthLoginPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useRagitApIContext();
  return reactQuery.useMutation<
    Schemas.TAuthResponse,
    LoginAuthLoginPostError,
    LoginAuthLoginPostVariables
  >({
    mutationFn: (variables: LoginAuthLoginPostVariables) =>
      fetchLoginAuthLoginPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetUserAuthGetGetError = Fetcher.ErrorWrapper<undefined>;

export type GetUserAuthGetGetVariables = RagitApIContext["fetcherOptions"];

export const fetchGetUserAuthGetGet = (
  variables: GetUserAuthGetGetVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    Schemas.TUser | null,
    GetUserAuthGetGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/auth/get", method: "get", ...variables, signal });

export const useGetUserAuthGetGet = <TData = Schemas.TUser | null>(
  variables: GetUserAuthGetGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TUser | null,
      GetUserAuthGetGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRagitApIContext(options);
  return reactQuery.useQuery<
    Schemas.TUser | null,
    GetUserAuthGetGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/auth/get",
      operationId: "getUserAuthGetGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetUserAuthGetGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type AuthDiscordAuthDiscordPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type AuthDiscordAuthDiscordPostVariables = {
  body: Schemas.SignupDiscordRequest;
} & RagitApIContext["fetcherOptions"];

export const fetchAuthDiscordAuthDiscordPost = (
  variables: AuthDiscordAuthDiscordPostVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    Schemas.TAuthResponse,
    AuthDiscordAuthDiscordPostError,
    Schemas.SignupDiscordRequest,
    {},
    {},
    {}
  >({ url: "/auth/discord", method: "post", ...variables, signal });

export const useAuthDiscordAuthDiscordPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TAuthResponse,
      AuthDiscordAuthDiscordPostError,
      AuthDiscordAuthDiscordPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useRagitApIContext();
  return reactQuery.useMutation<
    Schemas.TAuthResponse,
    AuthDiscordAuthDiscordPostError,
    AuthDiscordAuthDiscordPostVariables
  >({
    mutationFn: (variables: AuthDiscordAuthDiscordPostVariables) =>
      fetchAuthDiscordAuthDiscordPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ChatRentomojoDemoChat1PostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type ChatRentomojoDemoChat1PostVariables = {
  body: Schemas.ChatRequest;
} & RagitApIContext["fetcherOptions"];

export const fetchChatRentomojoDemoChat1Post = (
  variables: ChatRentomojoDemoChat1PostVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    Schemas.ChatResponse,
    ChatRentomojoDemoChat1PostError,
    Schemas.ChatRequest,
    {},
    {},
    {}
  >({ url: "/demo/chat/1", method: "post", ...variables, signal });

export const useChatRentomojoDemoChat1Post = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ChatResponse,
      ChatRentomojoDemoChat1PostError,
      ChatRentomojoDemoChat1PostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useRagitApIContext();
  return reactQuery.useMutation<
    Schemas.ChatResponse,
    ChatRentomojoDemoChat1PostError,
    ChatRentomojoDemoChat1PostVariables
  >({
    mutationFn: (variables: ChatRentomojoDemoChat1PostVariables) =>
      fetchChatRentomojoDemoChat1Post({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetGuildChannelsDiscordGuildsGuildIdChannelsGetPathParams = {
  guildId: string;
};

export type GetGuildChannelsDiscordGuildsGuildIdChannelsGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetGuildChannelsDiscordGuildsGuildIdChannelsGetResponse =
  Schemas.TDiscordChannel[];

export type GetGuildChannelsDiscordGuildsGuildIdChannelsGetVariables = {
  pathParams: GetGuildChannelsDiscordGuildsGuildIdChannelsGetPathParams;
} & RagitApIContext["fetcherOptions"];

export const fetchGetGuildChannelsDiscordGuildsGuildIdChannelsGet = (
  variables: GetGuildChannelsDiscordGuildsGuildIdChannelsGetVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    GetGuildChannelsDiscordGuildsGuildIdChannelsGetResponse,
    GetGuildChannelsDiscordGuildsGuildIdChannelsGetError,
    undefined,
    {},
    {},
    GetGuildChannelsDiscordGuildsGuildIdChannelsGetPathParams
  >({
    url: "/discord/guilds/{guildId}/channels",
    method: "get",
    ...variables,
    signal,
  });

export const useGetGuildChannelsDiscordGuildsGuildIdChannelsGet = <
  TData = GetGuildChannelsDiscordGuildsGuildIdChannelsGetResponse,
>(
  variables: GetGuildChannelsDiscordGuildsGuildIdChannelsGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetGuildChannelsDiscordGuildsGuildIdChannelsGetResponse,
      GetGuildChannelsDiscordGuildsGuildIdChannelsGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRagitApIContext(options);
  return reactQuery.useQuery<
    GetGuildChannelsDiscordGuildsGuildIdChannelsGetResponse,
    GetGuildChannelsDiscordGuildsGuildIdChannelsGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/discord/guilds/{guildId}/channels",
      operationId: "getGuildChannelsDiscordGuildsGuildIdChannelsGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetGuildChannelsDiscordGuildsGuildIdChannelsGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type CreateInteractionDiscordInteractionsPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type CreateInteractionDiscordInteractionsPostVariables = {
  body: Schemas.TDiscordCreateInteractionRequest;
} & RagitApIContext["fetcherOptions"];

export const fetchCreateInteractionDiscordInteractionsPost = (
  variables: CreateInteractionDiscordInteractionsPostVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    Schemas.TDiscordCreateInteractionResponse,
    CreateInteractionDiscordInteractionsPostError,
    Schemas.TDiscordCreateInteractionRequest,
    {},
    {},
    {}
  >({ url: "/discord/interactions", method: "post", ...variables, signal });

export const useCreateInteractionDiscordInteractionsPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TDiscordCreateInteractionResponse,
      CreateInteractionDiscordInteractionsPostError,
      CreateInteractionDiscordInteractionsPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useRagitApIContext();
  return reactQuery.useMutation<
    Schemas.TDiscordCreateInteractionResponse,
    CreateInteractionDiscordInteractionsPostError,
    CreateInteractionDiscordInteractionsPostVariables
  >({
    mutationFn: (
      variables: CreateInteractionDiscordInteractionsPostVariables,
    ) =>
      fetchCreateInteractionDiscordInteractionsPost({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type GetInteractionsDiscordInteractionsProjectIdGetPathParams = {
  projectId: string;
};

export type GetInteractionsDiscordInteractionsProjectIdGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetInteractionsDiscordInteractionsProjectIdGetResponse =
  Schemas.TDiscordInteraction[];

export type GetInteractionsDiscordInteractionsProjectIdGetVariables = {
  pathParams: GetInteractionsDiscordInteractionsProjectIdGetPathParams;
} & RagitApIContext["fetcherOptions"];

export const fetchGetInteractionsDiscordInteractionsProjectIdGet = (
  variables: GetInteractionsDiscordInteractionsProjectIdGetVariables,
  signal?: AbortSignal,
) =>
  ragitApIFetch<
    GetInteractionsDiscordInteractionsProjectIdGetResponse,
    GetInteractionsDiscordInteractionsProjectIdGetError,
    undefined,
    {},
    {},
    GetInteractionsDiscordInteractionsProjectIdGetPathParams
  >({
    url: "/discord/interactions/{projectId}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetInteractionsDiscordInteractionsProjectIdGet = <
  TData = GetInteractionsDiscordInteractionsProjectIdGetResponse,
>(
  variables: GetInteractionsDiscordInteractionsProjectIdGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetInteractionsDiscordInteractionsProjectIdGetResponse,
      GetInteractionsDiscordInteractionsProjectIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useRagitApIContext(options);
  return reactQuery.useQuery<
    GetInteractionsDiscordInteractionsProjectIdGetResponse,
    GetInteractionsDiscordInteractionsProjectIdGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/discord/interactions/{projectId}",
      operationId: "getInteractionsDiscordInteractionsProjectIdGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetInteractionsDiscordInteractionsProjectIdGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/project/{projectId}/sources";
      operationId: "getProjectSourcesProjectProjectIdSourcesGet";
      variables: GetProjectSourcesProjectProjectIdSourcesGetVariables;
    }
  | {
      path: "/project/get";
      operationId: "getProjectForUserProjectGetGet";
      variables: GetProjectForUserProjectGetGetVariables;
    }
  | {
      path: "/auth/get";
      operationId: "getUserAuthGetGet";
      variables: GetUserAuthGetGetVariables;
    }
  | {
      path: "/discord/guilds/{guildId}/channels";
      operationId: "getGuildChannelsDiscordGuildsGuildIdChannelsGet";
      variables: GetGuildChannelsDiscordGuildsGuildIdChannelsGetVariables;
    }
  | {
      path: "/discord/interactions/{projectId}";
      operationId: "getInteractionsDiscordInteractionsProjectIdGet";
      variables: GetInteractionsDiscordInteractionsProjectIdGetVariables;
    };
